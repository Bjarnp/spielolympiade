generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String   @id @default(uuid())
  name         String
  username     String   @unique
  passwordHash String
  mustChangePassword Boolean @default(false)
  role         Role
  createdAt    DateTime @default(now())

  teamMemberships TeamMember[]
}

model Team {
  id        String   @id @default(uuid())
  name      String
  seasonId  String
  season    Season   @relation(fields: [seasonId], references: [id])

  members   TeamMember[]
  matches1  Match[]  @relation("Team1")
  matches2  Match[]  @relation("Team2")
  wins      Match[]  @relation("Winner")

  results   MatchResult[]
}

model TeamMember {
  id      String @id @default(uuid())
  team    Team   @relation(fields: [teamId], references: [id])
  teamId  String
  user    User   @relation(fields: [userId], references: [id])
  userId  String
}

model Game {
  id    String @id @default(uuid())
  name  String
  rules String?

  matches Match[]
}

model Season {
  id       String  @id @default(uuid())
  year     Int
  name     String
  isActive Boolean  @default(false)
  finishedAt DateTime?

  teams       Team[]
  tournaments Tournament[]
}

model Tournament {
  id        String   @id @default(uuid())
  seasonId  String
  season    Season   @relation(fields: [seasonId], references: [id])
  system    TournamentSystem
  location  String?
  createdAt DateTime @default(now())

  matches   Match[]
}

model Match {
  id           String   @id @default(uuid())
  tournamentId String
  tournament   Tournament @relation(fields: [tournamentId], references: [id])
  gameId       String
  game         Game      @relation(fields: [gameId], references: [id])

  team1Id      String
  team1        Team      @relation("Team1", fields: [team1Id], references: [id])
  team2Id      String
  team2        Team      @relation("Team2", fields: [team2Id], references: [id])
  winnerId     String?
  winner       Team?     @relation("Winner", fields: [winnerId], references: [id])

  scheduledAt  DateTime?
  playedAt     DateTime?

  results      MatchResult[]
}

model MatchResult {
  id       String  @id @default(uuid())
  matchId  String
  match    Match   @relation(fields: [matchId], references: [id])
  teamId   String
  team     Team    @relation(fields: [teamId], references: [id])
  score    Int?
  comment  String?
}

enum Role {
  admin
  player
}

enum TournamentSystem {
  round_robin
  single_elim
  double_elim
}
